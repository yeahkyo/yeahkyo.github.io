<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yeah,]]></title>
  <link href="http://http://yeahkyo.github.io/atom.xml" rel="self"/>
  <link href="http://http://yeahkyo.github.io/"/>
  <updated>2016-02-16T15:31:18+08:00</updated>
  <id>http://http://yeahkyo.github.io/</id>
  <author>
    <name><![CDATA[Yeah]]></name>
    
  </author>

  
  <entry>
    
    <title type="html"><![CDATA[谈一谈CoreData]]></title>
    <link href="http://yeahkyo.github.io/blog/2016/02/05/core-data/"/>
    
    <updated>2016-02-05T16:06:31+08:00</updated>
    <id>http://http://yeahkyo.github.io/blog/2016/02/05/core-data</id>
    
      <content type="html"><![CDATA[<p>最近在写客户端的数据搜集工具YZAnalytics，随后也希望能开源出来让大家可以配合一些后端工具集（如ELK）快速地定制一个自己的数据分析系统。</p>

<p>客户端这一边需要在本地做一些数据的存储，希望用CoreData来做，之前没有深入地使用过CoreData，所以想先近距离好好了解一下CoreData。</p>

<p>这一篇主要讲讲CoreData到底能为我们提供什么帮助、大致架构是什么样的；了解怎样配置和进行基本的操作；关于多线程和性能方面的实践方式。</p>

<!--more-->


<h3>CoreData可以解决什么问题</h3>

<p>首先简单看一看CoreData作为一个「产品」能满足我们怎样的需求。</p>

<ol>
<li><p>持久化存储</p>

<p> 持久化存储是开发者最基础需求之一，CoreData在存储层面支持SQLite、XML、Binary多种存储方式。使用CoreData可以免去我们直接操作数据库或者文件的那些繁琐操作。<br/>
实现持久化这一层的功能主要涉及两个类，NSPersistentStore和NSPersistentStoreCoordinator，它们为不同类型的存储格式封装了一套统一的接口。</p></li>
<li><p>ORM(Object Relational Mapping)</p>

<p> 通过继承NSManagedObject类，我们可以借助CoreData完成数据字段到对象属性的映射，然后直接操作对象属性。</p></li>
<li><p>关系数据</p>

<p> CoreData加上SQLite可以帮助我们在客户端使用关系数据库处理比较复杂的需求。</p></li>
<li><p>Lazy loading</p>

<p> CoreData运用一种叫Faulting的技术，对NSManagedObject的属性、甚至是关联的NSManagedObject对象做了lazy loading。为我们有效的减少了不必要的内存使用。</p>

<p> 举个例子，我们从数据库读取了一个Person对象，它有一个属性是company，对应的另一张叫Company的表里的数据，在我们真正使用company属性之前，person的company指向的其实是一个壳对象(fault)，它并没有加载对应的Company表条目里的数据。</p>

<p> 另外提一点的是Uniquing，CoreData为我们保证了对应相同数据的壳对象也会是唯一的，这样就不会出现同一个company的很多个person，在company被真正加载之前指向的却使不同对象。</p></li>
<li><p>Validation</p>

<p> 在ManagedModel的编辑页面我们可以对每个属性加一些constraints，比如最小值、最大值。之后我们可以用 validateValue:forKey:error: 方法来对做validation。
 如果想对一些属性做更复杂的自定义验证，比如age，实现下面这个方法就可以:</p>

<pre><code class="`"> - (BOOL)validateValue:(inout id _Nullable *)ioValue
            forKey:(NSString *)key
             error:(out NSError * _Nullable *)outError;
</code></pre>

<p> 当我们在调用validateValue:forKey:error:时，它不仅会做默认的constraints验证，还会在运行时自动寻找我们的这些自定义验证。</p></li>
<li><p>Change tracking和undo、redo、rollback</p>

<p> NSManagedObjectContext(MOC)维护着与它关联的ManagedObject的修改记录与当前状态，每一个MOC都拥有一个NSUndoManager，它支持着我们对数据操作的undo、redo、reset、rollback这些操作。
 如果你完全不需要这些操作，应该考虑把MOC的undoManager设置为nil，这样可以节省不少内存，也省去CoreData做一些不必要的操作。</p></li>
<li><p>版本管理、数据迁移</p>

<p> 支持数据版本管理，在应用上线后快速迭代过程中，难以避免会改变数据格式。</p></li>
<li><p>多线程</p></li>
<li><p>数据与UI绑定</p>

<p> 我们可以利用NSFetchResultsController轻松地将TableView与CoreData的数据做绑定。数据的变化也可以利用NSFetchResultsÇontroller的回调更新到TableView上。
 由于涉及到更新UI的操作，这里用到的MOC一定得是在MainQueue上运行的。</p></li>
<li><p>支持KVO、KVC</p></li>
<li><p>同步iCloud</p></li>
</ol>


<h3>CoreData怎么用</h3>

<p>快速介绍一下怎么开始使用CoreData吧。</p>

<ol>
<li><p>在Target的Build Phases -> Link Binary With Libraries中，引入CoreData.framework</p></li>
<li><p>添加一个.xcdatamodeld文件，它对应着NSManagedObjectModel，用来描述一组数据的结构。在这里可以使用图形界面增加Entity，也就是对应的NSEntityDescription，用来描述一个一个的数据对象模型，Entity中可以添加NSPropertyDescription，既Attributes、Relationships和FetchedProperties。属性的默认范围等也可以在右侧的面板中设置。</p></li>
<li><p>接下来利用刚刚添加的xcdatamodeld文件创建一个NSManagedObjectModel，然后用这个Object Model构建一个NSPersistentStoreCoordinator，还需要为这个StoreCoordinator配置一个文件用来存储最终数据。想下面伪代码描述了关键的步骤。</p>

<pre><code class="`"> NSManagedObjectModel *managedObjectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelFileURL];
 NSPersistentStoreCoordinator *persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:managedObjectModel];
 NSURL *storeURL = [directoryYouWantToStore URLByAppendingPathComponent:@"database.sqlite"];
 [persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeURL options:nil error:&amp;error];
</code></pre></li>
<li><p>有了persistentStoreCoordinator就容易构造NSManagedObjectContext了</p>

<pre><code class="`"> NSManagedObjectContext *managedObjectContext = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSPrivateQueueConcurrencyType];
 [managedObjectContext setPersistentStoreCoordinator:persistentStoreCoordinator];
</code></pre></li>
<li><p>NSFetchRequest、NSPredicate</p>

<p> 数据操作无非就是增删改查，这里我们虽然选择了SQLite作为存储介质，但是并不直接使用SQL来与数据库交互，数据的修改、创建、删除都可以借由NSManagedObject和NSManagedObjectContext来完成。而读取操作需要使用到NSFetchRequest和NSPredicate，他们可以完成对特定数据的读取、排序等操作。对于SQLite存储，最终这些查询会转换成SQL语句交给SQLite来执行，而对于其他的存储介质，这些功能将以纯Cocoa的方式实现，比如说用到字符串大小比较来完成排序等。所以，SQLite在实际生产环境中使用应该是可以得到一个比较快的存取速度的。</p></li>
</ol>


<h3>对数据的操作</h3>

<ol>
<li><p>create</p>

<p> 利用NSEntityDescription的insertNewObjectForEntityName:inManagedObjectContext:方法，在指定的MOC上创建一个新的Managed Object对象，然后就可以操作这个对象的各种属性，最后save对应的MOC就可以将操作保存到文件了。</p></li>
<li><p>fetch</p>

<p> 调用MOC的excuteFetchRequest:error:方法会返回一个NSManagedObject的数组，对应这fetchRequest中描述的读取条件。
 NSFetchRequest的使用也是很方便的，根据entityName就可以构造一个fetchRequest，然后可以通过fetchLimit限制读取数量，绑定predicate来增加限制条件等。</p></li>
<li><p>update</p>

<p> 修改数据其实就是在读取到了指定的数据并映射到managedObject后，直接对对象进行操作，然后save其对应的MOC就行。</p></li>
<li><p>delete</p>

<p> 直接利用MOC的deleteObject:方法即可在context删除指定对象，最后也不要忘记save context。</p></li>
</ol>


<h3>Advanced Topic</h3>

<ol>
<li><p>Concurrcy</p></li>
<li><p>数据一致性</p>

<p> 如果涉及多个MOC操作同一个Managed Object的情况，就要留心数据一致性的问题了，就像我们合并代码一样，需要告诉MOC一个mergePolicy。默认情况的策略是NSErrorMergePolicy，一旦出现conflict会在userInfo的conflictList字段返回一个冲突列表，告诉我们哪些属性已经被修改过了，你可以把这些信息转达给用户，或者手动做一些操作后再保存。
 另外四种策略可以让MOC自动帮我们选择合适的数据保存。 NSMergeByPropertyStoreTrumpMergePolicy:当出现冲突时，保留数据库里已有的数据。
 NSMergeByPropertyObjectTrumpMergePolicy:当出现冲突时，保留当前MOC管理的数据。
 NSOverwriteMergePolicy:无视数据库里的数据版本，直接用当前MOC数据覆盖。
 NSRollbackMergePolicy:如果出现冲突就丢弃当前MOC数据的修改。</p></li>
<li><p>性能优化</p>

<p> If you do not intend to use Core Data’s undo functionality, you can reduce your application&rsquo;s resource requirements by setting the context’s undo manager to nil. This may be especially beneficial for background worker threads, as well as for large import or batch operations.</p>

<p> NSFetchResultsController cache</p></li>
</ol>


<h3>MagicalRecord</h3>

<p><a href="https://github.com/magicalpanda/MagicalRecord">https://github.com/magicalpanda/MagicalRecord</a></p>

<h3>在Analytics中的使用</h3>

<ul>
<li>为什么要用CoreData</li>
<li>内存管理、性能上的注意事项</li>
</ul>


<h3>深入阅读</h3>

<p>想更深入的了解CoreData的一些特性和原理，可以看看《Pro Core Data for iOS》。
豆瓣链接：<a href="http://book.douban.com/subject/10205854/">http://book.douban.com/subject/10205854/</a></p>

<h4>References</h4>

<p>《Core Data Programming Guide》<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CoreData/ChangeManagement.html#//apple_ref/doc/uid/TP40001075-CH22-SW1">https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CoreData/ChangeManagement.html#//apple_ref/doc/uid/TP40001075-CH22-SW1</a></p>
]]></content>
      
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[CSS3 transition]]></title>
    <link href="http://yeahkyo.github.io/blog/2015/11/02/css3-transition/"/>
    
    <updated>2015-11-02T11:50:05+08:00</updated>
    <id>http://http://yeahkyo.github.io/blog/2015/11/02/css3-transition</id>
    
      <content type="html"><![CDATA[<p>最近在练手用一些平时不太常用的工具做东西，纯CSS3的动画和渐变之前了解过但是没正儿八经写过，这一次以做一个常见的按钮状态渐变为目标。</p>

<!-- more -->


<h3>CSS3 Transitions</h3>

<p>给页面元素的某些CSS属性加上一个transition之后，这个元素的属性变化时就会由浏览器自动完成补间的动画。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.some-element</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">transition</span><span class="o">:</span> <span class="no">width</span> <span class="mi">2</span><span class="kt">s</span> <span class="n">ease-in-out</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所有.some-element的元素，当它的width变化时，这个变化过程会由一个2秒的动画来过渡完成。ease-in-out表示动画的速度是渐进渐出的，而且会延迟0.5秒触发。</p>

<p>这里是一个transition简写的例子，其实是把transition-property transition-duration transition-timing-fuction transition-delay融到了一起，详细的解释大家可以看看CSS3的官方文档。</p>

<p>除了常用的CSS属性，如width height background-color等等。我们还可以利用CSS3的transforms来灵活改变元素在页面上的显示。</p>

<p>在很多平台上我们都能利用一些坐标变换来完成图像的变形，现在CSS3推进它来到了web浏览器上。
常用的transform函数主要有下面几个</p>

<ul>
<li>translate() ： 坐标平移</li>
<li>rotate()    ： 坐标旋转</li>
<li>scale()     ： 缩放</li>
<li>skew()      ： 倾斜</li>
<li>matrix()    ： 矩阵变换</li>
</ul>


<h3>Code：按钮动画</h3>

<p>菜单按钮在未激活的状态下呈现「三明治」图案，激活状态下呈现「X」（叉）的图案。中间用CSS3的transform+transition来和谐过渡。</p>

<p>在页面添加一个简单的按钮，用来做练习。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;menu-button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;$(this).toggleClass(&#39;active&#39;)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   <span class="nt">&lt;span&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/button&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>利用span和它的::before和::after selector来画三条线。
menu-button切换到active状态时，::before的线（上面的线）和::after的线(下面的线）做top与transform两种变换。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.menu-button</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">border</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'>  <span class="na">width</span><span class="o">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">50</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="ni">orange</span><span class="p">;</span>
</span><span class='line'>  <span class="na">border-radius</span><span class="o">:</span> <span class="mi">25</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>  <span class="na">position</span><span class="o">:</span> <span class="no">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="na">right</span><span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="na">bottom</span><span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="na">outline</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>  
</span><span class='line'><span class="na">.menu-button</span><span class="err"> </span><span class="na">span,</span>
</span><span class='line'><span class="na">.menu-button</span><span class="err"> </span><span class="na">span</span><span class="o">::</span><span class="n">before</span><span class="o">,</span>
</span><span class='line'><span class="o">.</span><span class="n">menu-button</span> <span class="n">span</span><span class="o">::</span><span class="n">after</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">background</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>  <span class="na">height</span><span class="o">:</span> <span class="mi">4</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>  <span class="na">position</span><span class="o">:</span> <span class="no">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="na">display</span><span class="o">:</span> <span class="no">block</span><span class="p">;</span>
</span><span class='line'>  <span class="na">border-radius</span><span class="o">:</span> <span class="mi">2</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.menu-button</span> <span class="nt">span</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">top</span><span class="o">:</span> <span class="mi">23</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>  <span class="na">left</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>  <span class="na">right</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="na">transition</span><span class="o">:</span> <span class="no">background</span> <span class="mi">0</span><span class="mf">.3</span><span class="kt">s</span> <span class="mi">0</span><span class="kt">s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">.menu-button</span><span class="err"> </span><span class="na">span</span><span class="o">::</span><span class="n">before</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">top</span><span class="o">:</span> <span class="mi">-8</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>  <span class="na">width</span><span class="o">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
</span><span class='line'>  <span class="na">content</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="na">transition</span><span class="o">:</span> <span class="no">top</span> <span class="mi">0</span><span class="mf">.3</span><span class="kt">s</span> <span class="mi">0</span><span class="mf">.3</span><span class="kt">s</span><span class="o">,</span> <span class="n">transform</span> <span class="mi">0</span><span class="mf">.3</span><span class="kt">s</span> <span class="mi">0</span><span class="kt">s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">.menu-button</span><span class="err"> </span><span class="na">span</span><span class="o">::</span><span class="n">after</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">top</span><span class="o">:</span> <span class="mi">8</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>  <span class="na">content</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="na">width</span><span class="o">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="na">transition</span><span class="o">:</span> <span class="no">top</span> <span class="mi">0</span><span class="mf">.3</span><span class="kt">s</span> <span class="mi">0</span><span class="mf">.3</span><span class="kt">s</span><span class="o">,</span> <span class="n">transform</span> <span class="mi">0</span><span class="mf">.3</span><span class="kt">s</span> <span class="mi">0</span><span class="kt">s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.menu-button.active</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">span</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">background</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'>    <span class="na">transition</span><span class="o">:</span> <span class="no">background</span> <span class="mi">0</span><span class="mf">.3</span><span class="kt">s</span> <span class="mi">0</span><span class="mf">.3</span><span class="kt">s</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="na">span</span><span class="o">::</span><span class="n">before</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">top</span><span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="na">transform</span><span class="o">:</span> <span class="nf">rotate</span><span class="p">(</span><span class="mi">45</span><span class="kt">deg</span><span class="p">);</span>
</span><span class='line'>    <span class="na">transition</span><span class="o">:</span> <span class="no">top</span> <span class="mi">0</span><span class="mf">.3</span><span class="kt">s</span> <span class="mi">0</span><span class="kt">s</span><span class="o">,</span> <span class="n">transform</span> <span class="mi">0</span><span class="mf">.3</span><span class="kt">s</span> <span class="mi">0</span><span class="mf">.3</span><span class="kt">s</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="na">span</span><span class="o">::</span><span class="n">after</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">top</span><span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="na">transform</span><span class="o">:</span> <span class="nf">rotate</span><span class="p">(</span><span class="mi">-45</span><span class="kt">deg</span><span class="p">);</span>
</span><span class='line'>    <span class="na">transition</span><span class="o">:</span> <span class="no">top</span> <span class="mi">0</span><span class="mf">.3</span><span class="kt">s</span> <span class="mi">0</span><span class="kt">s</span><span class="o">,</span> <span class="n">transform</span> <span class="mi">0</span><span class="mf">.3</span><span class="kt">s</span> <span class="mi">0</span><span class="mf">.3</span><span class="kt">s</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>浏览器支持</h3>

<p>想要在实际项目中使用CSS3的新技术还得考虑到浏览器的支持问题，想IE、Chrome、Firefox、Opera等常用浏览器最新的版本都支持大部分CSS3新特性，但是之前的版本或不完全支持，或需要特定的前缀来描述。</p>

<p>所以，像上面的例子，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="na">transform</span><span class="o">:</span> <span class="nf">rotate</span><span class="p">(</span><span class="mi">45</span><span class="kt">deg</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>只是个标准语句，要想支持各种浏览器内核的稍早版本，需要这样写</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="na">-web-kit-transform</span><span class="o">:</span> <span class="nf">rotate</span><span class="p">(</span><span class="mi">45</span><span class="kt">deg</span><span class="p">);</span>
</span><span class='line'><span class="na">-o-transform</span><span class="o">:</span> <span class="nf">rotate</span><span class="p">(</span><span class="mi">45</span><span class="kt">deg</span><span class="p">);</span>
</span><span class='line'><span class="na">-moz-transform</span><span class="o">:</span> <span class="nf">rotate</span><span class="p">(</span><span class="mi">45</span><span class="kt">deg</span><span class="p">);</span>
</span><span class='line'><span class="na">-ms-transform</span><span class="o">:</span> <span class="nf">rotate</span><span class="p">(</span><span class="mi">45</span><span class="kt">deg</span><span class="p">);</span>
</span><span class='line'><span class="na">transform</span><span class="o">:</span> <span class="nf">rotate</span><span class="p">(</span><span class="mi">45</span><span class="kt">deg</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这未免有点麻烦，现在有很多第三方框架为我们更方便的使用CSS3的特性提供了工具，这里推荐一下Compass。</p>

<h3>Compass</h3>

<p>像上面说的浏览器对新特性的支持问题，Compass利用SASS的mixin为我们提供了很多helper方法，让我们不用写一大堆冗余的语句，比如CSS3的border-radius属性，可以方便的设置圆角，但是很多早期浏览器并不支持这个标准属性，而是在当时暂时支持了自己内核的一个替代属性，如 -webkit-border-radius。</p>

<p>Compass则封装了一个border-radius($radius方法)，我们只需在自定义的样式里，@include border-radius(4px)即可。</p>

<p>border-raduis()源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="k">@mixin</span><span class="nf"> border-radius</span><span class="p">(</span><span class="nv">$radius</span><span class="o">:</span> <span class="nv">$default-border-radius</span><span class="o">,</span> <span class="nv">$vertical-radius</span><span class="o">:</span> <span class="n-Pseudo">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">@include</span><span class="nd"> with-each-prefix</span><span class="p">(</span><span class="no">border</span><span class="o">-</span><span class="n">radius</span><span class="o">,</span> <span class="nv">$border-radius-threshold</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@if</span> <span class="nv">$current-prefix</span> <span class="o">==</span> <span class="o">-</span><span class="n">webkit</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Legacy Webkit didn&#39;t understand the official shorthand syntax for specifying a vertical radius.</span>
</span><span class='line'>      <span class="nv">$legacy-webkit-radius</span><span class="o">:</span> <span class="nf">first-value-of</span><span class="p">(</span><span class="nv">$radius</span><span class="p">);</span>
</span><span class='line'>      <span class="k">@if</span> <span class="nv">$vertical-radius</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$legacy-webkit-radius</span><span class="o">:</span> <span class="nf">append</span><span class="p">(</span><span class="nv">$legacy-webkit-radius</span><span class="o">,</span> <span class="nf">first-value-of</span><span class="p">(</span><span class="nv">$vertical-radius</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">@include</span><span class="nd"> prefix-prop</span><span class="p">(</span><span class="no">border</span><span class="o">-</span><span class="n">radius</span><span class="o">,</span> <span class="nv">$legacy-webkit-radius</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">@else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Official syntax for everyone else</span>
</span><span class='line'>      <span class="k">@include</span><span class="nd"> prefix-prop</span><span class="p">(</span><span class="no">border</span><span class="o">-</span><span class="n">radius</span><span class="o">,</span> <span class="nf">if</span><span class="p">(</span><span class="nv">$vertical-radius</span><span class="o">,</span> <span class="si">#{</span><span class="nv">$radius</span><span class="si">}</span> <span class="o">/</span> <span class="si">#{</span><span class="nv">$vertical-radius</span><span class="si">}</span><span class="o">,</span> <span class="nv">$radius</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了提供CSS3的helpers外，Compass还带来了很多实用的功能，这里提一下方便选择使用。</p>

<ul>
<li>Spirte: 提供多张图片就能完成一个简单的精灵对象。</li>
<li>Verticle Rhythm帮助我们更好的布局</li>
<li>Variables 提供很多Globle的CSS变量</li>
<li>etc.</li>
</ul>

]]></content>
      
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Privacy About iOS 9]]></title>
    <link href="http://yeahkyo.github.io/blog/2015/07/24/ok/"/>
    
    <updated>2015-07-24T23:38:35+08:00</updated>
    <id>http://http://yeahkyo.github.io/blog/2015/07/24/ok</id>
    
      <content type="html"><![CDATA[<p>WWDC15 Session 703, 「Privacy and Your App」</p>

<h3>App Transport Security. Aka ATS</h3>

<p>iOS 9.0引入了App Transport Security的功能，所有使用NSURLConnection、CFURL和NSURLSession的连接都默认支持。当然，如果你使用基于这些Apple官方技术的其他开源库也一样要注意这一新功能。</p>

<!-- more -->


<p></p>

<p>既然Apple已经把ATS作为默认行为加到了网络库里，我们还要做什么呢？当然是让服务端也与客户端对应，也支持安全链接。<br/>
直接把你的应用编译到iOS 9上，如果你发现，图片、音乐和其他一些从网络获取资源都不能正常使用了，就是因为你的客户端采用了ATS，但服务端并没有满足它的要求。我们看看官方文档，发现使用ATS的App所访问的web服务需要满足这三个条件才能正常工作：</p>

<ul>
<li>The protocol Transport Security Layer (TLS) must be at least version 1.2.</li>
<li>Connection ciphers are limited to those that provide forward secrecy (see the list of ciphers below.)</li>
<li>Certificates must use at least an SHA256 fingerprint with either a 2048 bit or greater RSA key, or a 256 bit or greater Elliptic-Curve (ECC) key.</li>
</ul>


<p>现在，切换我们原来的HTTP服务，给他们加上TLS支持吧。
当然，如果你使用了第三方服务，一时来不及切换所有资源到HTTPS下，也可以在Info.plist中设置关闭ATS，或者对某些指定的域名设置ATS，让App在iOS 9下能正常工作。与ATS相关的key是「NSAppTransportSecurity」，它接收一个Dictionary来描述我们的设置。「NSAllowsArbitraryLoads」接收BOOL值指示是否关闭默认的ATS；「NSExceptionDomains」可以给出一些列的域名，对这些域名进行详细设置，如设置TLS的最低要求版本、允许不安全链接等等。</p>

<p>不管怎样，我们还是应该尽快的支持好ATS，让App跑得更安全才是明路。</p>

<h3>LSApplicationQueriesSchemes</h3>

<p>在iOS 8.3以前，想要检测其他App是否在设备上安装了，我们可以用底层的sysctl()来获取当前正在运行的进程列表，然后看看是否有想要的App；也可以通过[UIApplication sharedApplication] canOpenUrl:]来判断是否有应用程序能接受满足这个URL的scheme.现在iOS 9下，我们可能要改变一下我们的实现了。</p>

<ul>
<li>在iOS 9中已经不能再查看当前运行的程序列表了。</li>
<li>使用canOpenUrl的方法也有变动，需要在info.plist里添加LSApplicationQueriesSchemes明确列出我们的App需要访问的URL Schemes，这样canOpenUrl才会在想访问的App已安装的情况下返回YES。也只有这样，openURL才能正常的唤起目标App。</li>
</ul>

]]></content>
      
  </entry>
  
</feed>
