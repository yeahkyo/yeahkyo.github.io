<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Yeah,]]></title>
  <link href="http://yeahkyo.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://yeahkyo.github.io/"/>
  <updated>2015-11-19T17:20:34+08:00</updated>
  <id>http://yeahkyo.github.io/</id>
  <author>
    <name><![CDATA[Yeah]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Privacy About iOS 9]]></title>
    <link href="http://yeahkyo.github.io/blog/2015/07/24/ok/"/>
    <updated>2015-07-24T23:38:35+08:00</updated>
    <id>http://yeahkyo.github.io/blog/2015/07/24/ok</id>
    <content type="html"><![CDATA[<p>WWDC15 Session 703, 「Privacy and Your App」</p>

<h3>App Transport Security. Aka ATS</h3>

<p>iOS 9.0引入了App Transport Security的功能，所有使用NSURLConnection、CFURL和NSURLSession的连接都默认支持。当然，如果你使用基于这些Apple官方技术的其他开源库也一样要注意这一新功能。</p>

<p>既然Apple已经把ATS作为默认行为加到了网络库里，我们还要做什么呢？当然是让服务端也与客户端对应，也支持安全链接。<br/>
直接把你的应用编译到iOS 9上，如果你发现，图片、音乐和其他一些从网络获取资源都不能正常使用了，就是因为你的客户端采用了ATS，但服务端并没有满足它的要求。我们看看官方文档，发现使用ATS的App所访问的web服务需要满足这三个条件才能正常工作：</p>

<ul>
<li>The protocol Transport Security Layer (TLS) must be at least version 1.2.</li>
<li>Connection ciphers are limited to those that provide forward secrecy (see the list of ciphers below.)</li>
<li>Certificates must use at least an SHA256 fingerprint with either a 2048 bit or greater RSA key, or a 256 bit or greater Elliptic-Curve (ECC) key.</li>
</ul>


<p>现在，切换我们原来的HTTP服务，给他们加上TLS支持吧。
当然，如果你使用了第三方服务，一时来不及切换所有资源到HTTPS下，也可以在Info.plist中设置关闭ATS，或者对某些指定的域名设置ATS，让App在iOS 9下能正常工作。与ATS相关的key是「NSAppTransportSecurity」，它接收一个Dictionary来描述我们的设置。「NSAllowsArbitraryLoads」接收BOOL值指示是否关闭默认的ATS；「NSExceptionDomains」可以给出一些列的域名，对这些域名进行详细设置，如设置TLS的最低要求版本、允许不安全链接等等。</p>

<p>不管怎样，我们还是应该尽快的支持好ATS，让App跑得更安全才是明路。</p>

<h3>LSApplicationQueriesSchemes</h3>

<p>在iOS 8.3以前，想要检测其他App是否在设备上安装了，我们可以用底层的sysctl()来获取当前正在运行的进程列表，然后看看是否有想要的App；也可以通过[UIApplication sharedApplication] canOpenUrl:]来判断是否有应用程序能接受满足这个URL的scheme.现在iOS 9下，我们可能要改变一下我们的实现了。</p>

<ul>
<li>在iOS 9中已经不能再查看当前运行的程序列表了。</li>
<li>使用canOpenUrl的方法也有变动，需要在info.plist里添加LSApplicationQueriesSchemes明确列出我们的App需要访问的URL Schemes，这样canOpenUrl才会在想访问的App已安装的情况下返回YES。也只有这样，openURL才能正常的唤起目标App。</li>
</ul>

]]></content>
  </entry>
  
</feed>
